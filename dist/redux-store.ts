
            System.define(System.normalizeSync('redux-store.ts'), `
                System.register([],function(a,b){"use strict";var c,d,e;b&&b.id;return{setters:[],execute:function(){c={},d=[],e=function(){function a(){}return a.prototype.beforeRegister=function(){this.is="redux-store",this.properties={rootReducer:{type:Object,observer:"rootReducerSet"},action:{type:Object,observer:"actionChanged"},storeName:{type:String,observer:"storeNameSet",value:"default"},localStateName:{type:String}}},a.prototype.ready=function(){c[this.storeName]?this.subscribe():d=d.concat([this])},a.prototype.subscribe=function(){var a=this;c[this.storeName].store.subscribe(function(){a.fire("statechange",{state:c[a.storeName].store.getState()},{bubbles:!1})})},a.prototype.getState=function(){return c[this.storeName].store.getState()},a.prototype.actionChanged=function(a,b){var d=this,e=function(a,b){function e(a,b,c){if("LOCAL_STATE_CHANGE"===c.type){if(a.localStateName){var d=Object.assign({},b,(e={},e[a.localStateName]=f(c),e));return d}throw"LOCAL_STATE_CHANGE action dispatched, but localStateName has not been set. You must set the local-state-name attribute on this redux-store-element."}return b;var e}function f(a){return Object.keys(a).filter(function(a){return"type"!==a}).reduce(function(b,c){return b[c]=a[c],b},{})}var g=e(d,a,b);return c[d.storeName].rootReducer(g,b)};c[this.storeName].store.replaceReducer(e),c[this.storeName].store.dispatch(a)},a.prototype.rootReducerSet=function(a,b){this.rootReducer&&this.storeName&&this.createTheStore()},a.prototype.storeNameSet=function(a,b){this.rootReducer&&this.storeName&&this.createTheStore()},a.prototype.createTheStore=function(){var a=this;c[this.storeName]={store:Redux.createStore(this.rootReducer),rootReducer:this.rootReducer},d=d.filter(function(b){var c=b.storeName===a.storeName;return c&&b.subscribe(),!c})},a}(),Polymer(e)}}});
            `);
        